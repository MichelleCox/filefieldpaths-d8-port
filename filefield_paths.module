<?php
/**
 * @file
 * Contains core functions for the File (Field) Paths module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;


//@TODO: Replace the include files.
// The File, Image, and Video include files are implementing
// hook_filefield_paths_field_type_info() on their behalf. That should be
// replaced with a plugin. The other includes should just be integrated into the
// rest of the code.
/**
 * Include additional files.
 */
$dirname = dirname(__FILE__) . "/modules";
$includes = file_scan_directory($dirname, '/.inc$/');
foreach (\Drupal::moduleHandler()->getModuleList() as $module) {
  $module_name = $module->getName();
  if (isset($includes[$file = "{$dirname}/{$module_name}.inc"])) {
    require_once $file;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function filefield_paths_form_field_ui_field_edit_form_alter(array &$form, FormStateInterface $form_state) {
  // Get the settings manager service to do all the work.
  $settings_manager = \Drupal::service('filefield_paths.settings_manager');

  $settings_manager->alterSettingsForm($form, $form_state);
}

/**
 * Implements hook_entity_insert().
 */
function filefield_paths_entity_insert(EntityInterface $entity) {

  filefield_paths_process_entity($entity);
}

/**
 * Implements hook_entity_update().
 */
function filefield_paths_entity_update(EntityInterface $entity) {
  filefield_paths_process_entity($entity);
}

function filefield_paths_process_entity(EntityInterface $entity) {
  // We don't want to process config entities as they are not fieldable.
  if ($entity instanceof ContentEntityInterface) {

    // Get the manager service to do all the work.
    $manager = \Drupal::service('filefield_paths.manager');

    // Tell it about the containing entity (ie: node)
    $manager->setContentEntity($entity);

    // Process all the fields on it.
    $manager->processContentEntity();
  }
}


/**
 * @param bool $reset
 * @return array
 */
function _filefield_paths_get_field_types($reset = FALSE) {
  $field_types = &drupal_static(__FUNCTION__);

  if (empty($field_types) || $reset) {
    $field_types = \Drupal::moduleHandler()->invokeAll('filefield_paths_field_type_info');
    $field_types = array_flip($field_types);
    foreach (array_keys($field_types) as $type) {
      $info = \Drupal::service('plugin.manager.field.field_type')->getDefinition($type);
      $field_types[$type] = array(
        'label' => $info['label']
      );
    }
  }

  return $field_types;
}

/**
 * Submit callback for File (Field) Paths settings form.
 */
function filefield_paths_form_submit($form, &$form_state) {
  // TODO: Make retroactive updates work.
  /*
  // Retroactive updates.
  if ($form_state['values']['instance']['settings']['filefield_paths_enabled'] && $form_state['values']['instance']['settings']['filefield_paths']['retroactive_update']) {
    filefield_paths_batch_update($form_state['values']['instance']);
    batch_process($form_state['redirect']);
  }
  */
}


// @TODO: Remove the rest of the code in this file once it's replaced or absorbed.


/**
 * Implements hook_filefield_paths_process_file().
 */
// @TODO: Original code kept for reference until it is absorbed.
function filefield_paths_filefield_paths_process_file($type, $entity, $field, $instance, $langcode, &$items) {
  if (isset($instance['settings']['filefield_paths'])) {
    $settings = $instance['settings']['filefield_paths'];
    foreach ($items as &$file) {
      if (filefield_paths_uri_is_local($file['uri']) && ($file['timestamp'] == REQUEST_TIME || $settings['active_updating'])) {
        $token_data = array(
          'file' => (object) $file,
          $type => $entity
        );

        // Copy the original file for comparison purposes.
        $old_file = $file;

        // Process filename.
        $settings['file_name']['options']['context'] = 'file_name';
        $file['filename'] = !empty($settings['file_name']['value'])
          ? filefield_paths_process_string($settings['file_name']['value'], $token_data, $settings['file_name']['options'])
          : $file['filename'];

        // Process filepath.
        $settings['file_path']['options']['context'] = 'file_path';
        $file['uri'] = "{$field['settings']['uri_scheme']}://" . ltrim(filefield_paths_process_string($settings['file_path']['value'], $token_data, $settings['file_path']['options']) . "/{$file['filename']}", '/');

        // Finalize file if necessary.
        if ($file !== $old_file) {
          $dirname = drupal_dirname($file['uri']);
          if (file_prepare_directory($dirname, FILE_CREATE_DIRECTORY) && file_move((object) $old_file, $file['uri'])) {
            // Process regular expression.
            _filefield_paths_replace_path($old_file['uri'], $file['uri'], $entity);

            // Remove any old empty directories.
            $scheme = file_uri_scheme($old_file['uri']);
            $paths = explode('/', str_replace("{$scheme}://", '', drupal_dirname($old_file['uri'])));
            while ($paths) {
              if (@drupal_rmdir("{$scheme}://" . implode('/', $paths)) == TRUE) {
                array_pop($paths);
                continue;
              }
              break;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_file_presave().
 */
function filefield_paths_file_presave($file) {
  // @TODO: Original code kept for reference until it is absorbed.
  // Store original filename in the database.
  if (empty($file->origname) && isset($file->filename)) {
    $file->origname = $file->filename;
  }
}


/**
 * Run regular expression over all available text-based fields.
 */
function _filefield_paths_replace_path($old, $new, $entity) {
  // @TODO: Original code kept for reference until it is absorbed.

  // Build regular expression.
  $info = parse_url(file_stream_wrapper_uri_normalize($old));
  $info['path'] = !empty($info['path']) ? $info['path'] : '';
  $info['path'] = \Drupal\Component\Utility\UrlHelper::encodePath($info['path']);
  $absolute = str_replace("{$info['host']}{$info['path']}", '', file_create_url($old));
  $relative = parse_url($absolute, PHP_URL_PATH);
  $regex = str_replace('/', '\/', "({$absolute}|{$relative}|{$info['scheme']}://)(styles/([a-z0-9\-_/]*?)/{$info['scheme']}/|)({$info['host']}{$info['path']})");

  // Build replacement.
  $info = parse_url(file_stream_wrapper_uri_normalize($new));
  $info['path'] = !empty($info['path']) ? $info['path'] : '';
  $replacement = "_filefield_paths_replace_path_uri_scheme('\${1}', '{$old}', '{$new}') . '\${2}{$info['host']}{$info['path']}'";

  // Newer versions of the Image module add an 8 character token which is
  // required if the image style hasn't been generated yet. Look for this token
  // in the query string and replace it.
  if (defined('IMAGE_DERIVATIVE_TOKEN')) {
    $regex .= '(\?(\S+?&|)' . IMAGE_DERIVATIVE_TOKEN . '=(\S{8})|)';
    $replacement .= " . _filefield_paths_replace_image_derivative_token('{$old}', '{$new}', '\${5}', '\${7}', '\${3}')";
  }

  // @FIXME
// Fields and field instances are now exportable configuration entities, and
// the Field Info API has been removed.
// 
// 
// @see https://www.drupal.org/node/2012896
// $fields = field_info_fields();
/*
  foreach ($fields as $name => $field) {
    if ($field['module'] == 'text' && isset($entity->{$field['field_name']}) && is_array($entity->{$field['field_name']})) {
      foreach ($entity->{$field['field_name']} as &$language) {
        foreach ($language as &$item) {
          $item['value'] = preg_replace("/$regex/e", $replacement, $item['value']);
          if (isset($item['summary'])) {
            $item['summary'] = preg_replace("/$regex/e", $replacement, $item['summary']);
          }
        }
      }
    }
  }
*/
}

/**
 * Helper function for File (Field) Paths URI updater regular expression.
 *
 * Determines what format the old URI prefix was and returns the new URI prefix
 * in the same format.
 */
function _filefield_paths_replace_path_uri_scheme($prefix, $old, $new) {
  // @TODO: Original code kept for reference until it is absorbed.
  switch (TRUE) {
    case $prefix == file_uri_scheme($old) . '://':
      return file_uri_scheme($new) . '://';

    case $prefix == file_create_url(file_uri_scheme($old) . '://'):
      return file_create_url(file_uri_scheme($new) . '://');

    case $prefix == parse_url(file_create_url(file_uri_scheme($old) . '://'), PHP_URL_PATH):
      return parse_url(file_create_url(file_uri_scheme($new) . '://'), PHP_URL_PATH);
  }

  return $prefix;
}

/**
 * Helper function for File (Field) Paths URI updater regular expression.
 *
 * Replaces the image derivative token at the end of a query string with a new
 * one appropriate for the new file URI.
 */
function _filefield_paths_replace_image_derivative_token($old_uri, $new_uri, $query_string, $token, $style_name) {
  // @TODO: Original code kept for reference until it is absorbed.
  // Only replace the token if the old one was valid.
  if ($query_string && $token && $style_name && $token === image_style_path_token($style_name, $old_uri)) {
    return substr_replace($query_string, image_style_path_token($style_name, $new_uri), -strlen($token));
  }
  return $query_string;
}

/**
 * Check if a uri is considered local or not.
 *
 * @param string $uri
 *   A file uri.
 *
 * @return
 *   TRUE if the uri is using a local stream wrapper, or FALSE otherwise.
 */
function filefield_paths_uri_is_local($uri) {
  // @TODO: Original code kept for reference until it is absorbed.
  $scheme = file_uri_scheme($uri);
  $wrappers = \Drupal::service("stream_wrapper_manager")->getWrappers(STREAM_WRAPPERS_LOCAL);
  return !empty($wrappers[$scheme]) && empty($wrappers[$scheme]['remote']);
}
