<?php
/**
 * @file
 * Contains core functions for the File (Field) Paths module.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

//@TODO: Replace the include files.
// The File, Image, and Video include files are implementing
// hook_filefield_paths_field_type_info() on their behalf. That should be
// replaced with a plugin. The other includes should just be integrated into the
// rest of the code.
/**
 * Include additional files.
 */
$dirname = dirname(__FILE__) . "/modules";
$includes = file_scan_directory($dirname, '/.inc$/');
foreach (\Drupal::moduleHandler()->getModuleList() as $module) {
  $module_name = $module->getName();
  if (isset($includes[$file = "{$dirname}/{$module_name}.inc"])) {
    require_once $file;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function filefield_paths_form_field_ui_field_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->get('field');

  // This gets a list of all the field types from enabled modules that responded
  // to the hook_filefield_paths_field_type_info() invocation. This hook is
  // currently implemented on behalf of File, Image, and Video in the include
  // files under the "modules" directory.
  $field_types = _filefield_paths_get_field_types();

  if (isset($field->field_type) && in_array($field->field_type, array_keys($field_types))) {
    // @TODO: Hiding directory field doesn't work.
    // Hide standard File directory field.
    $form['field']['settings']['file_directory']['#states'] = array(
      'visible' => array(
        ':input[name="form[field][third_party_settings][filefield_paths][enabled]"]' => array('checked' => FALSE),
      ),
    );

    // FFP fieldset.
    $form['field']['third_party_settings']['filefield_paths'] = array(
      '#type' => 'details',
      '#title' => t('File (Field) Paths settings'),
      '#open' => TRUE,
    );

    // Enable / disable.
    $default = $field->getThirdPartySetting('filefield_paths', 'enabled', TRUE);
    $form['field']['third_party_settings']['filefield_paths']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable File (Field) Paths?'),
      '#default_value' => $default,
      '#weight' => -10,
    );

    // Token browser.
    $form['field']['third_party_settings']['filefield_paths']['token_tree'] = array(
      '#type' => '#markup',
      '#theme' => 'token_tree_link',
      '#weight' => -5,
    );

    // File path.
    $default = $field->getThirdPartySetting('filefield_paths', 'filepath', '');
    $form['field']['third_party_settings']['filefield_paths']['filepath'] = array(
      '#type' => 'textfield',
      '#title' => t('File path'),
      '#maxlength' => 512,
      '#size' => 128,
      '#element_validate' => array('_file_generic_settings_file_directory_validate'),
      '#default_value' => $default,
    );

    // @TODO: Make sure the options save with the extra array depth.
    // File path options fieldset.
    $form['field']['third_party_settings']['filefield_paths']['path_options'] = array(
      '#type' => 'details',
      '#title' => t('File path options'),
      '#open' => FALSE,
    );

    // Clean up path with Pathauto.
    $default = $field->getThirdPartySetting('filefield_paths', 'pathauto_path', FALSE);
    $form['field']['third_party_settings']['filefield_paths']['path_options']['pathauto_path'] = filefield_paths_pathauto_element('filepath', $default);

    // Clean up path with Transliteration
    $default = $field->getThirdPartySetting('filefield_paths', 'transliteration_path', FALSE);
    $form['field']['third_party_settings']['filefield_paths']['path_options']['transliteration_path'] = filefield_paths_transliteration_element('filepath', $default);

    // File name.
    $default = $field->getThirdPartySetting('filefield_paths', 'filename', '[file:ffp-name-only-original].[file:ffp-extension-original]');
    $form['field']['third_party_settings']['filefield_paths']['filename'] = array(
      '#type' => 'textfield',
      '#title' => t('File name'),
      '#maxlength' => 512,
      '#size' => 128,
      '#element_validate' => array('_file_generic_settings_file_directory_validate'),
      '#default_value' => $default,
    );

    // File name options fieldset.
    $form['field']['third_party_settings']['filefield_paths']['name_options'] = array(
      '#type' => 'details',
      '#title' => t('File name options'),
      '#open' => FALSE,
    );

    // Clean up filename with Pathauto.
    $default = $field->getThirdPartySetting('filefield_paths', 'pathauto_filename', FALSE);
    $form['field']['third_party_settings']['filefield_paths']['name_options']['pathauto_filename'] = filefield_paths_pathauto_element('filename', $default);

    // Clean up filename with Transliteration.
    $default = $field->getThirdPartySetting('filefield_paths', 'transliteration_filename', FALSE);
    $form['field']['third_party_settings']['filefield_paths']['name_options']['transliteration_filename'] = filefield_paths_transliteration_element('filename', $default);

    // Retroactive updates.
    $default = $field->getThirdPartySetting('filefield_paths', 'retroactive_update', FALSE);
    $form['field']['third_party_settings']['filefield_paths']['retroactive_update'] = array(
      '#type' => 'checkbox',
      '#title' => t('Retroactive update'),
      '#description' => t('Move and rename previously uploaded files.') . '<div>' . t('<strong class="warning">Warning:</strong> This feature should only be used on developmental servers or with extreme caution.') . '</div>',
      '#weight' => 11,
      '#default_value' => $default,
    );

    // Active updating.
    $default = $field->getThirdPartySetting('filefield_paths', 'active_updating', FALSE);
    $form['field']['third_party_settings']['filefield_paths']['active_updating'] = array(
      '#type' => 'checkbox',
      '#title' => t('Active updating'),
      '#default_value' => $default,
      '#description' => t('Actively move and rename previously uploaded files as required.') . '<div>' . t('<strong class="warning">Warning:</strong> This feature should only be used on developmental servers or with extreme caution.') . '</div>',
      '#weight' => 12
    );

    // @TODO: Uncomment this when retroactive updates are working.
    // $form['#submit'][] = 'filefield_paths_form_submit';
  }
}

/**
 * Submit callback for File (Field) Paths settings form.
 */
function filefield_paths_form_submit($form, &$form_state) {
  // TODO: Make retroactive updates work.
  /*
  // Retroactive updates.
  if ($form_state['values']['instance']['settings']['filefield_paths_enabled'] && $form_state['values']['instance']['settings']['filefield_paths']['retroactive_update']) {
    filefield_paths_batch_update($form_state['values']['instance']);
    batch_process($form_state['redirect']);
  }
  */
}

/**
 * Implements hook_entity_insert().
 */
function filefield_paths_entity_insert($entity, $type) {
  filefield_paths_entity_update($entity, $type);
}

/**
 * Implements hook_entity_update().
 */

// @TODO This entire function needs changing to new Entity Field API.
function filefield_paths_entity_update(EntityInterface $entity) {
$x=1;
  /*
  $processed = FALSE;
  $field_types = _filefield_paths_get_field_types();
  $entity_info = \Drupal::entityManager()->getDefinition($type);
  $bundle_name = !empty($entity_info['entity keys']['bundle']) ? $entity->{$entity_info['entity keys']['bundle']} : $type;
  if ($entity_info['fieldable']) {

// Fields and field instances are now exportable configuration entities, and
// the Field Info API has been removed.
/// @see https://www.drupal.org/node/2012896
 foreach (field_info_fields($type, $bundle_name) as $field) {
       if (in_array($field['type'], array_keys($field_types))) {
         $files = array();
         $instance = field_info_instance($type, $field['field_name'], $bundle_name);
         $enabled = (isset($instance['settings']['filefield_paths_enabled']) && $instance['settings']['filefield_paths_enabled']) || !isset($instance['settings']['filefield_paths_enabled']);
         if ($enabled && isset($entity->{$field['field_name']})) {
           foreach ($entity->{$field['field_name']} as $langcode => &$deltas) {
             foreach ($deltas as $delta => &$file) {
               // Prepare file.
               if (function_exists($function = "{$field['module']}_field_load")) {
                 $items = array(array(&$file));
                 $function($type, array($entity), $field, array($instance), $langcode, $items, FIELD_LOAD_CURRENT);
               }
               $files[] = &$file;
             }
             // Invoke hook_filefield_paths_process_file().
             foreach (\Drupal::moduleHandler()->getImplementations('filefield_paths_process_file') as $module) {
               if (function_exists($function = "{$module}_filefield_paths_process_file")) {
                 $processed = TRUE;
                 $function($type, $entity, $field, $instance, $langcode, $files);
               }
             }
           }
         }
       }
     }


    if ($processed) {
      $entity->original = isset($entity->original) ? $entity->original : NULL;
      field_attach_update($type, $entity);
    }
  }
*/
}

/**
 * Implements hook_file_presave().
 */
function filefield_paths_file_presave($file) {
  // Store original filename in the database.
  if (empty($file->origname) && isset($file->filename)) {
    $file->origname = $file->filename;
  }
}

function filefield_paths_pathauto_element($setting, $default) {
  if (\Drupal::moduleHandler()->moduleExists('pathauto')) {
    $pathauto_enabled = TRUE;
    $description = t('Cleanup %setting using <a href="@pathauto">Pathauto settings</a>.', array(
      '%setting' => $setting,
      '@pathauto' => Url::fromRoute('pathauto.settings.form')));
    $default_value = $default;
  }
  else {
    $pathauto_enabled = FALSE;
    $description = t('Pathauto is not installed');
    $default_value = FALSE;
  }

  return array(
    '#type' => 'checkbox',
    '#title' => t('Cleanup using Pathauto'),
    '#default_value' => $default_value,
    '#description' => $description,
    '#disabled' => !$pathauto_enabled,
  );
}

function filefield_paths_transliteration_element($setting, $default) {
  if (\Drupal::moduleHandler()->moduleExists('transliteration')) {
    $transliteration_enabled = TRUE;
    $description = t('Provides one-way string transliteration (romanization) and cleans the %setting during upload by replacing unwanted characters.', array('%setting' => $setting));
    $default_value = $default;
  }
  else {
    $transliteration_enabled = FALSE;
    $description = t('Transliteration is not installed');
    $default_value = FALSE;
  }

  return array(
    '#type' => 'checkbox',
    '#title' => t('Cleanup using Transliteration'),
    '#default_value' => $default_value,
    '#description' => $description,
    '#disabled' => !$transliteration_enabled,
  );
}

/**
 * Run regular expression over all available text-based fields.
 */
function _filefield_paths_replace_path($old, $new, $entity) {
  // Build regular expression.
  $info = parse_url(file_stream_wrapper_uri_normalize($old));
  $info['path'] = !empty($info['path']) ? $info['path'] : '';
  $info['path'] = \Drupal\Component\Utility\UrlHelper::encodePath($info['path']);
  $absolute = str_replace("{$info['host']}{$info['path']}", '', file_create_url($old));
  $relative = parse_url($absolute, PHP_URL_PATH);
  $regex = str_replace('/', '\/', "({$absolute}|{$relative}|{$info['scheme']}://)(styles/([a-z0-9\-_/]*?)/{$info['scheme']}/|)({$info['host']}{$info['path']})");

  // Build replacement.
  $info = parse_url(file_stream_wrapper_uri_normalize($new));
  $info['path'] = !empty($info['path']) ? $info['path'] : '';
  $replacement = "_filefield_paths_replace_path_uri_scheme('\${1}', '{$old}', '{$new}') . '\${2}{$info['host']}{$info['path']}'";

  // Newer versions of the Image module add an 8 character token which is
  // required if the image style hasn't been generated yet. Look for this token
  // in the query string and replace it.
  if (defined('IMAGE_DERIVATIVE_TOKEN')) {
    $regex .= '(\?(\S+?&|)' . IMAGE_DERIVATIVE_TOKEN . '=(\S{8})|)';
    $replacement .= " . _filefield_paths_replace_image_derivative_token('{$old}', '{$new}', '\${5}', '\${7}', '\${3}')";
  }

  // @FIXME
// Fields and field instances are now exportable configuration entities, and
// the Field Info API has been removed.
// 
// 
// @see https://www.drupal.org/node/2012896
// $fields = field_info_fields();

  foreach ($fields as $name => $field) {
    if ($field['module'] == 'text' && isset($entity->{$field['field_name']}) && is_array($entity->{$field['field_name']})) {
      foreach ($entity->{$field['field_name']} as &$language) {
        foreach ($language as &$item) {
          $item['value'] = preg_replace("/$regex/e", $replacement, $item['value']);
          if (isset($item['summary'])) {
            $item['summary'] = preg_replace("/$regex/e", $replacement, $item['summary']);
          }
        }
      }
    }
  }
}

/**
 * Helper function for File (Field) Paths URI updater regular expression.
 *
 * Determines what format the old URI prefix was and returns the new URI prefix
 * in the same format.
 */
function _filefield_paths_replace_path_uri_scheme($prefix, $old, $new) {
  switch (TRUE) {
    case $prefix == file_uri_scheme($old) . '://':
      return file_uri_scheme($new) . '://';

    case $prefix == file_create_url(file_uri_scheme($old) . '://'):
      return file_create_url(file_uri_scheme($new) . '://');

    case $prefix == parse_url(file_create_url(file_uri_scheme($old) . '://'), PHP_URL_PATH):
      return parse_url(file_create_url(file_uri_scheme($new) . '://'), PHP_URL_PATH);
  }

  return $prefix;
}

/**
 * Helper function for File (Field) Paths URI updater regular expression.
 *
 * Replaces the image derivative token at the end of a query string with a new
 * one appropriate for the new file URI.
 */
function _filefield_paths_replace_image_derivative_token($old_uri, $new_uri, $query_string, $token, $style_name) {
  // Only replace the token if the old one was valid.
  if ($query_string && $token && $style_name && $token === image_style_path_token($style_name, $old_uri)) {
    return substr_replace($query_string, image_style_path_token($style_name, $new_uri), -strlen($token));
  }
  return $query_string;
}



/**
 * @param bool $reset
 * @return array
 */
function _filefield_paths_get_field_types($reset = FALSE) {
  $field_types = &drupal_static(__FUNCTION__);

  if (empty($field_types) || $reset) {
    $field_types = \Drupal::moduleHandler()->invokeAll('filefield_paths_field_type_info');
    $field_types = array_flip($field_types);
    foreach (array_keys($field_types) as $type) {
      $info = \Drupal::service('plugin.manager.field.field_type')->getDefinition($type);
      $field_types[$type] = array(
        'label' => $info['label']
      );
    }
  }

  return $field_types;
}

/**
 * Check if a uri is considered local or not.
 *
 * @param string $uri
 *   A file uri.
 *
 * @return
 *   TRUE if the uri is using a local stream wrapper, or FALSE otherwise.
 */
function filefield_paths_uri_is_local($uri) {
  $scheme = file_uri_scheme($uri);
  $wrappers = \Drupal::service("stream_wrapper_manager")->getWrappers(STREAM_WRAPPERS_LOCAL);
  return !empty($wrappers[$scheme]) && empty($wrappers[$scheme]['remote']);
}
